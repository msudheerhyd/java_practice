No. of Projects done = 82

Technologies that I Know:
	Spring-Boot
	Django
	React
	MySql
	MongoDB
	MERN
	HTML
	CSS
	Javascript
	Python
	Java





Learnt Linked List 
How to insert elements into Linked List
How to print Linked List 
Data Structures that I learnt:-
	Array
	List
	Map
	LinkedList


Integer Array
Char Array
Array List
Addition of elements to list
Deletion of elements from list
Printing array
Printing list
Learnt Git
	git status
	ls
	mkdir
	cd ..
	git log
	git commit -m
	vim
	git push
	:wq

Learnt how to print integers in an array
Learnt how to print character in an array
Learnt how to print strings in an array
Learnt how to add elements into a list
Learnt how to print list items
Learnt how to push files into github


Learnt Stack today
How to insert elements into Stack
How to push 
How to pop
How to print the updated stack



Data Structures that I have learnt till now :
	Array
	List
	Map
	LinkedList
	Stack



What I have learnt today:
	1.Queue
	2.Inserting elements into Queue
	3.Polling out elements from the queue

Data structures that I have learnt till now:
	1.Array
	2.List
	3.Map
	4.LinkedList
	5.Stack
	6.Queue



What I have done today: 
	1. Printing elements from the array.
	2. Printing elements from the list.
	3. Printing elements from the map.
	4. Printing elements from the LinkedList.
	5. Printing elements from the Stack
	6. Printing elements from the Queue.

Data Structures that I have learnt till now:
	1. Array
	2. List
	3. Map
	4. Stack
	5. LinkedList
	6. Queue




What I have learnt today:
	Class
	How to create an object
	How to print elements.




What I have learnt today:
	Creating a class
	How to write a method to print objects of a class using toString() method.

Data Structures that I have learnt till now:
	1.array
	2.List
	3.Map
	4.LinkedList
	5.Stack
	6.Queue



What I have learnt today:
	How to create a class
	How to create objects and print them.
	How to create a constructor
	How to pass parameters into constructor

Meditation = 8 times.





What I have learnt today:
	1.How to create a contructor
	2.How to create list with class
	3.How to add objects to the list
	
	4.How to create map with class
	5.How to add objects to the map
	6.How to print the list and map



Meditation : 8 + 13 = 21 Times 





   
What I have learnt today :
	1.Inheritance
	2.How to create a class through inheritance
	3.How to use parent objects in child object





What I have learnt today :
	How to create a Vehicle( (Parent) class
	How to create a car (Child) class
	How to write a method in class and override the method in the child class
	How to print them using toString()

	1. ls | grep searchString
	2. date
	3. Shift A goes to the last position in same line   shortcut in vim
	4. gg to go to the first position in vim
	5. Shift g to go to the last position in vim 
	6. Shift I goes to the first position in same line 




What I have learnt today:
	Java Encapsulation :
		1. Getters method
		2. Setters method


What I have learnt today:
	1. Method overriding
		i. How to write a method in parent class
		ii.How to use inheritence using 'e'
		iii. How to override the functions.





   
What I have learnt today :
	1. Polymorphism
	2. Method Overloading
	3. Abstraction
	
	Java concepts I have learnt till now: 
		1. Inheritence
		2. Polymorphism
		3. Encapsulation
		4. Abstraction




What I have learnt today :
	1. Abstraction
	2. Abstract Method


What I have learnt today :
	1. Interface (Fully Abstract)
	2. Class implements




What I have learnt today:
	Acces Modifiers: 
		1. Public 
		2. Private



Inheritence: 	Child class extending parent class
Polymorphism: 	Method Overriding and Method Overloading
Abstraction:  	Abstract classes and interface
Encapsulation: 	Getters and Setters





What I have learnt today:
	1. While Loop

What I have learnt till now:
	1. Inheritence: Child Class extending Parent class
	2. Encapsulation: Getters and Setters
	3. Polymorphism: Method Overriding and Method Overloading
	4. Abstraction: Interface, Child class implementing Abstract Parent class.




   
What I have learnt today: 
	1. Creating a class in a different file
	2. Importing a file from a different package


What I have learnt today: 
	1. Data types:
		i. int
		ii. double
		iii. Conversion of int to double and double to int.


What I have learnt today :
	1. Switch
	2. Break




   
What I have learnt today: 
	1. continue
	2. break

Abstraction: 
	1. Child class extending Abstract class
	2. Child class implementing Interface 




What I have learnt today: 
	1. Try
	2. Catch





   
What I have learnt today: 
	1. Files
	2. Creating file


What I have learnt today: 
	1. Files
	2. Opening an existing file and printing the data in it

SQL that I have learnt till now:
	1. SELECT 





SELECT DISTINCT SupplierID FROM Products



What I have learnt today:
	1. Iterator
	2. How to print the list of array elements through Iterator	


SELECT * FROM [Products] WHERE SupplierID = 1

SELECT * FROM [Products] WHERE PRICE > 40

SELECT * FROM [Products]
WHERE Price < 30


SELECT * FROM [Products]
WHERE Price <> 18

SELECT * FROM [Products]
WHERE Price BETWEEN 20 AND 30

SELECT * FROM [Customers]
WHERE City in ('Berlin', 'London')


SELECT * FROM Categories
WHERE CategoryName = 'Condiments';


What I have learnt today: 
	1. Pattern
	2. Matcher


SELECT * FROM [Customers]
WHERE City = 'Berlin' AND Country = 'Germany';


SELECT * FROM [Customers]
WHERE City = 'Berlin' or Country = 'Mexico';

SELECT * FROM [Customers]
WHERE Country = 'Sweden' OR Country = 'Spain';


SELECT * FROM [Customers]
WHERE NOT Country = 'Spain';


SELECT * FROM [Customers]
WHERE Country = 'Germany' AND (City = 'Berlin' OR 'Munchen');


SELECT * FROM [Customers]
WHERE NOT Country = 'USA' AND NOT Country = 'Germany';'


What I have learnt today:
	1.Thread



SELECT * FROM Customers 
ORDER BY Country;


SELECT * FROM Customers
ORDER BY Country DESC;

SELECT * FROM Customers
ORDER BY Country, CustomerName;

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;


What  have learnt today:
	1. Math Library


INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Sunil', 'Linus', '123 Herkimer St', 'Kansas', '600060', "USA");

INSERT INTO Customers (CustomerName, ContactName, Country)
VALUES ('Vengaiah', 'Radcliffe', 'India');

What I have learnt today:
	1. HashSet

SELECT CustomerName, ContactName, Address
FROM Customers 
WHERE Address IS NULL;

SELECT CustomerName, ContactName, Address 
FROM Customers
WHERE Address IS NOT NULL;

UPDATE Customers
SET ContactName = 'Lewandowski', City = "Bayern"
WHERE CustomerId = 2;

UPDATE Customers
SET ContactName = 'Linus'
WHERE Country = 'Mexico';

What I have learnt today:
	1. Recursion

SELECT TOP 9 * FROM Customers;

SELECT * FROM Customers LIMIT 10;


SELECT TOP 50 PERCENT * FROM Customers;

SELECT TOP 5 * FROM Customers 
WHERE Country = 'Germany';

SELECT * FROM Customers
WHERE Country = 'Germany'
LIMIT 5;

SELECT MIN(Price) As SmallestPrice
FROM Products;

SELECT MAX(Price) AS LargestPrice
FROM Products;

SELECT COUNT(ProductID) AS TotalProducts
FROM Products;


SELECT AVG(Price) AS AveragePrice
FROM Products;


SELECT SUM(Quantity) AS SumOfProducts
FROM OrderDetails;

SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';

SELECT * FROM Customers
WHERE CustomerName LIKE '%a';

SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';

SELECT * FROM Customers
WHERE ContactName LIKE '_r%';

SELECT * FROM Customers
WHERE ContactName LIKE 'a__%';


SELECT * FROM Customers
WHERE ContactName LIKE 'a%o';

SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'b%';

SELECT * FROM Customers
WHERE City LIKE 'ber%';

SELECT * FROM Customers
WHERE Country LIKE '%ce%';

SELECT * FROM Customers
WHERE City LIKE '_ondon';

SELECT * FROM Customers
WHERE City LIKE 'L_n_on';

SELECT * FROM Customers
WHERE Country LIKE '[GSU]%';

SELECT * FROM Customers
WHERE City LIKE '[A-C]%';

SELECT * FROM Customers
WHERE City LIKE '[!BSP]%';

SELECT * FROM Customers
WHERE City NOT LIKE '[BSP]%';

SELECT * FROM Customers
WHERE Country IN ('Germany', 'UK', 'France');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');


SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20 
AND CategoryID NOT IN (1, 2, 3);


SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;


SELECT * FROM Products
WHERE ProductName BETWEEN "Carnarvon Tigers" AND "Chef Anton's Cajun Seasoning"
ORDER BY ProductName;

SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';

SELECT CustomerID AS ID,
CustomerName AS Customer FROM Customers;

SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;


SELECT CustomerName, Address + ', ' + City + ', ' + PostalCode + ', ' + ' ' + Country AS Address
FROM Customers

SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
FROM Customers;

SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;

SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

SELECT Orders.OrderID, Customers.CustomerName,
Orders.OrderDate FROM Orders
INNER JOIN Customers ON Orders.CustomerId=Customers.CustomerId;


SELECT Orders.OrderID, Customers.CustomerName
FROM Orders 
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;


SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees
ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;

SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City 
ORDER BY A.City;

SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;

SELECT City FROM Customers
UNION ALL
SELECT City FROM Suppliers
ORDER BY City;


SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION ALL
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;

SELECT 'Customer' AS Type, ContactName, City, Country
FROM Customers
UNION
SELECT 'Supplier', ContactName, City, Country
FROM Suppliers

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
ORDER BY COUNT(CustomerID) DESC;

SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5;

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5
ORDER BY COUNT(CustomerID) DESC;


SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);


SELECT ProductName 
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity > 99);

SELECT ALL ProductName
FROM Products
WHERE TRUE;

SELECT ProductName 
FROM Products
WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT * INTO CustomersBackup2017
FROM Customers;

SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'
FROM Customers;

SELECT CustomerName, ContactName INTO CustomersBackup2017
FROM Customers;

SELECT * INTO CustomersGermany
FROM Customers
WHERE Country = 'Germany';

SELECT Customers.CustomerName, Orders.OrderID
INTO CustomersOrderBackup2017
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

SELECT * INTO newtable
FROM oldtable
WHERE 1 = 0;

INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers;


INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;


INSERT INTO Customers (CustomerName, City, Country)
SELECT SupplierName, City, Country FROM Suppliers
WHERE Country='Germany';


SELECT OrderID, Quantity,
CASE WHEN Quantity > 30 THEN 'The quantity is greater than 30'
WHEN Quantity = 30 THEN 'The quantity is 30'
ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;

SELECT CustomerName, City, Country FROM Customers
ORDER BY (CASE
WHEN City IS NULL THEN Country
ELSE City
END);

SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0))
FROM Products;

SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))
FROM Products;

CREATE PROCEDURE SelectAllCustomers
AS
SELECT * FROM Customers
GO;

EXEC SelectAllCustomers;

CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)
AS
SELECT * FROM Customers WHERE City = @City
GO;

EXEC SelectAllCustomers @City = 'London';

CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)
AS
SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode
GO;

EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP'


SELECT * FROM Customers WHERE (CustomerName LIKE 'L%'
OR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'
OR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')
AND Country='USA'
ORDER BY CustomerName;

SELECT * FROM Products
WHERE Price = 18;

SELECT * FROM Products
WHERE Price > 30;

SELECT * FROM Products
WHERE Price < 30;

SELECT * FROM Products
WHERE Price >= 30;

SELECT * FROM Products
WHERE Price <= 30;

SELECT * FROM Products
WHERE Price <> 18;

SELECT ProductName 
FROM Products
WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT * FROM Customers
WHERE City = "London" AND Country = "UK";

SELECT * FROM Products
WHERE Price > ANY (SELECT Price FROM Products WHERE Price > 50);

SELECT * FROM Products
WHERE Price BETWEEN 50 AND 60;

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);

SELECT * FROM Customers
WHERE City IN ('Paris','London');

SELECT * FROM Customers
WHERE City LIKE 's%';

SELECT * FROM Customers
WHERE City NOT LIKE 's%';

SELECT * FROM Customers
WHERE City = "London" OR Country = "UK";

SELECT * FROM Products

DROP DATABASE databasename;

DROP DATABASE testDB;

ALTER TABLE Customers
DROP COLUMN Email;

ALTER TABLE Persons
ADD DateOfBirth date;

ALTER TABLE Persons
ALTER COLUMN DateOfBirth year;

ALTER TABLE Persons
DROP COLUMN DateOfBirth;

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);

ALTER TABLE Persons
MODIFY Age int NOT NULL;

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    UNIQUE (ID)
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT UC_Person UNIQUE (ID,LastName)
);

ALTER TABLE Persons
ADD UNIQUE (ID);

ALTER TABLE Persons
ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);

ALTER TABLE Persons
DROP INDEX UC_Person;

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (ID)
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
);

ALTER TABLE Persons
ADD PRIMARY KEY (ID);

ALTER TABLE Persons
ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);

ALTER TABLE Persons
DROP PRIMARY KEY;

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
);

CREATE TABLE Orders (
    OrderID int NOT NULL,
    OrderNumber int NOT NULL,
    PersonID int,
    PRIMARY KEY (OrderID),
    CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)
    REFERENCES Persons(PersonID)
);

ALTER TABLE Orders
ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

ALTER TABLE Orders
ADD CONSTRAINT FK_PersonOrder
FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);

ALTER TABLE Orders
DROP FOREIGN KEY FK_PersonOrder;

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);

ALTER TABLE Persons
ADD CHECK (Age>=18);

ALTER TABLE Persons
ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');

ALTER TABLE Persons
DROP CHECK CHK_PersonAge;

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);

CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
);

ALTER TABLE Persons
ALTER City SET DEFAULT 'Sandnes';

ALTER TABLE Persons
ALTER City DROP DEFAULT;

CREATE INDEX idx_lastname
ON Persons (LastName);

CREATE INDEX idx_pname
ON Persons (LastName, FirstName);

ALTER TABLE table_name
DROP INDEX index_name;

CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);

ALTER TABLE Persons AUTO_INCREMENT=100;

INSERT INTO Persons (FirstName,LastName)
VALUES ('Lars','Monsen');


SELECT * FROM Orders WHERE OrderDate='2008-11-11'

CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';

